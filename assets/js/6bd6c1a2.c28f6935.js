"use strict";(self.webpackChunksafe_reqs_model=self.webpackChunksafe_reqs_model||[]).push([[4460],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?i.createElement(h,s(s({ref:n},p),{},{components:t})):i.createElement(h,s({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[d]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<a;c++)s[c]=t[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(7462),r=(t(7294),t(3905));const a={},s="SAFe Requirements Model",o={unversionedId:"safe-requirements-model",id:"safe-requirements-model",title:"SAFe Requirements Model",description:"The SAFe Requirements Model is a hierarchical model that defines requirements at the Epic, Feature, and Story levels. It is based on the INVEST) model for writing good user stories. The SAFe Requirements Model is a living document that will be updated as the product evolves and new requirements are identified.",source:"@site/docs/01-safe-requirements-model.md",sourceDirName:".",slug:"/safe-requirements-model",permalink:"/docs/safe-requirements-model",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-safe-requirements-model.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Accelerating SAFe",permalink:"/docs/play-safe"},next:{title:"Raw SAFe Requirements Model",permalink:"/docs/safe-raw-model-example"}},l={},c=[{value:"Our Class Diagram Implementation",id:"our-class-diagram-implementation",level:2},{value:"References",id:"references",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"safe-requirements-model"},"SAFe Requirements Model"),(0,r.kt)("p",null,"The SAFe Requirements Model is a hierarchical model that defines requirements at the Epic, Feature, and Story levels. It is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/INVEST_(mnemonic)"},"INVEST")," model for writing good user stories. The SAFe Requirements Model is a living document that will be updated as the product evolves and new requirements are identified."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://scaledagileframework.com/wp-content/uploads/2023/03/SAFe_Requirements_Model_F01-2.svg",alt:"SAFe_Requirements_Model_F01"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://scaledagileframework.com/safe-requirements-model/"},"SAFe Requirements Model")),(0,r.kt)("h2",{id:"our-class-diagram-implementation"},"Our Class Diagram Implementation"),(0,r.kt)("p",null,"Taking the SAFe Requirements Model as a reference, we have implemented the following Class Diagram, and is the one used to generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"frontMatter.taxonomy.contentTypes")," json."),(0,r.kt)("p",null,"Feel free to modify it to fit your needs, to suggest improvements, or sharing your ideas in the ",(0,r.kt)("a",{parentName:"p",href:"#"},"Discussions")," section, or reporting an ",(0,r.kt)("a",{parentName:"p",href:"#"},"Issue"),". Togheter we can improve this project! \ud83d\ude80"),(0,r.kt)("mermaid",{value:'classDiagram\n  note for MinimalViableProduct "Early and minimal version of the product\\nto approve/disprove the hypothesis"\n  note for PotentialMinimalViableProduct "Additional potential features\\nthat could be included in MVP"\n  note for UserStory "is an enabler story when\\n it is a technical requirement"\n\n  %%region LeanBussinessCase\n  class LeanBussinessCase {\n    + LeanBussinessCaseId: int\n    + EpicId: int\n    + FunnelEntryDate: string\n    + EpicOwner: string\n    + KeyStakeholders: List~string~\n    + LeadingIndicators: List~string~\n    + InScope: List~string~\n    + OutOfScope: List~string~\n    + NonFunctionalRequirements: List~string~\n    + AnalysisSummary: string\n    + goRecommended: bool\n    + goNoGoRecommendation: string\n  }\n  class MinimalViableProduct {\n    + MinimalViableProductId: int\n    + Features: List~int~\n    + Capabilities: List~int~\n  }\n  class PotentialMinimalViableProduct {\n    + MinimalViableProductId: int\n    + Features: List~int~\n    + Capabilities: List~int~\n  }  \n  %%endregion LeanBussinessCase\n\n  class Epic {\n    + EpicId: int\n    + Title: string\n    + EpicDescription: string\n    + EpicHypothesis: string\n    + OutcomeHypothesis: List~string~\n    %% Epic is an enabler epic when it is a technical requirement, otherwise is BusinessEpic\n    + enabler: bool\n    + isHypothesisProved(): bool\n  }\n\n  class Capability {\n    + CapabilityId: int\n    + Title: string\n    + Description: string\n    %% Capability is an enabler capability when it is a technical requirement, otherwise is BusinessCapability\n    + enabler: bool\n  }\n\n  class Feature {\n    + FeatureId: int\n    + Title: string\n    + Description: string\n    + enabler: bool\n  }\n\n  class UserStory {\n    + StoryId: int\n    + Title: string\n    + Description: string\n    %% UserStory is an enabler when it is a technical requirement\n    + enabler: bool\n    + AcceptanceCriteria: List~string~\n  }\n\n  class StoryAcceptanceTest {\n    + TestId: int\n    + Title: string\n    + Description: string\n  }\n\n  class CapabilityAcceptanceTest {\n    + TestId: int\n    + Title: string\n    + Description: string\n  }\n\n  class FeatureAcceptanceTest {\n    + TestId: int\n    + Title: string\n    + Description: string\n  }\n\n  class UnitTest {\n    + TestId: int\n    + Title: string\n    + Description: string\n  }\n\n  Epic <|-- PortfolioEpic\n  Epic <|-- SolutionTrainEpic\n  Epic <|-- ARTEpic\n  %%Epic <|-- BusinessEpic\n  %%Epic <|-- EnablerEpic\n  LeanBussinessCase "1" *-- "1" Epic\n  MinimalViableProduct "1" --* "1" LeanBussinessCase\n  PotentialMinimalViableProduct --* LeanBussinessCase\n  MinimalViableProduct o-- Feature\n\n  %% Refactorized to be included in MVP\n  %%Epic "1" -- "1..*" Capability\n  %%Epic "1" -- "1..*" Feature\n  Capability "0..1" --\x3e "1..*" Feature : Realized by\n  Feature "0..1" --\x3e "1..*" UserStory : Realized by\n  Feature "1" --\x3e "1..*" FeatureAcceptanceTest : done when passes\n  Capability "1" --\x3e "1..*" CapabilityAcceptanceTest : done when passes\n  UserStory "1" --\x3e "0..*" UnitTest : done when passes\n  UserStory "1" -- "1..*" StoryAcceptanceTest : done when passes\n'}),(0,r.kt)("p",null,"Generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"frontMatter.taxonomy.contentTypes")," json based on previous Class Diagram, following example below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"frontMatter.taxonomy.contentTypes": [\n  {\n    "name": "Epic",\n    "previewPath": null,\n    "pageBundle": false,\n    "fields": [\n      {\n        "title": "Title",\n        "name": "title",\n        "type": "string"\n      },\n      {\n        "title": "Description",\n        "name": "description",\n        "type": "string"\n      },\n      {\n        "title": "Publishing date",\n        "name": "date",\n        "type": "datetime",\n        "default": "{{now}}",\n        "isPublishDate": true\n      },\n      {\n        "title": "Last modified date",\n        "name": "lastmod",\n        "type": "datetime",\n        "isModifiedDate": true\n      },\n    ]\n  },\n  {\n    name: "Capability",\n    previewPath: null,\n    pageBundle: false,\n    fields: [\n      {\n        title: "Title",\n        name: "title",\n        type: "string"\n      },\n      {\n        title: "Description",\n        name: "description",\n        type: "string"\n      },\n      {\n        title: "Publishing date",\n        name: "date",\n        type: "datetime",\n        default: "{{now}}",\n        isPublishDate: true\n      },\n      {\n        title: "Last modified date",\n        name: "lastmod",\n        type: "datetime",\n        isModifiedDate: true\n      },\n    ]\n  }\n]\n')),(0,r.kt)("p",null,"Association --\x3e",(0,r.kt)("br",{parentName:"p"}),"\n","In an association relationship, one or more objects can be associated with each other.",(0,r.kt)("br",{parentName:"p"}),"\n","Objects are linked with each other."),(0,r.kt)("p",null,"o--\tAggregation",(0,r.kt)("br",{parentName:"p"}),"\n","In an aggregation relationship, objects that are associated with each other can remain in the scope of a system without each other.",(0,r.kt)("br",{parentName:"p"}),"\n","Linked objects are not dependent upon the other object."),(0,r.kt)("p",null,"*--\tComposition",(0,r.kt)("br",{parentName:"p"}),"\n","In a composition relationship, objects that are associated with each other cannot remain in the scope without each other.",(0,r.kt)("br",{parentName:"p"}),"\n","Objects are highly dependent upon each other."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://scaledagileframework.com/safe-requirements-model/"},"SAFe Requirements Model")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://frontmatter.codes"},"FrontMatter")," and ",(0,r.kt)("a",{parentName:"li",href:"https://frontmatter.codes/docs/content-creation/content-types"},"Content Types"))))}u.isMDXComponent=!0}}]);